#if TARGET_OS_SIMULATOR

#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LocalzMediaSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC14LocalzMediaSDK20LocalzMediaConstants")
@interface LocalzMediaConstants : NSObject
/// The notification center name constant for observing starting upload/download events.
/// <em>Note:</em> The <code>key</code> should be kept to track progress of following events.
/// <code>OnStartNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "key" : LocalzMediaKey
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnStartNotification;)
+ (NSNotificationName _Nonnull)OnStartNotification SWIFT_WARN_UNUSED_RESULT;
/// The notification center name constant for observing progressing upload/download events.
/// <code>OnProgressNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "progress" : Double
///    "key" : LocalzMediaKey
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnProgressNotification;)
+ (NSNotificationName _Nonnull)OnProgressNotification SWIFT_WARN_UNUSED_RESULT;
/// The notification center name constant for observing successful upload/download events.
/// <code>OnSuccessNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "data" : Data (optional)
///    "key" : LocalzMediaKey
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnSuccessNotification;)
+ (NSNotificationName _Nonnull)OnSuccessNotification SWIFT_WARN_UNUSED_RESULT;
/// The notification center name constant for observing successful upload/download events.
/// <code>OnErrorNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "error" : Error
///    "key" : LocalzMediaKey (optional)
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnErrorNotification;)
+ (NSNotificationName _Nonnull)OnErrorNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// All types of LocalzMediaSDK errors.
typedef SWIFT_ENUM(NSInteger, LocalzMediaErrorType, closed) {
/// Invalid parameter given.
  LocalzMediaErrorTypeInvalidParameter = 1,
/// Response received from server is invalid.
  LocalzMediaErrorTypeEInvalidResponseFromServer = 2,
/// Unknown error.
  LocalzMediaErrorTypeEUnknownError = 3,
/// 404 error.
  LocalzMediaErrorTypeENotFound = 4,
/// Not authorised error.
  LocalzMediaErrorTypeENotAuthorised = 5,
/// User cancelled action.
  LocalzMediaErrorTypeEUserCancelled = 6,
/// Facebook related errors.
  LocalzMediaErrorTypeEFacebookError = 7,
/// Beacon related errors. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeEBeaconError = 8,
/// Bluetooth not enabled. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeEBluetoothNotEnabled = 9,
/// Location services not authorized. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeELocationNotAuthorized = 10,
/// Location services denied. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeELocationDenied = 11,
/// Location services not authorized. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeELocationNotEnabled = 12,
/// No projects available. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeENoProjectsAvailable = 13,
/// No sites available. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeENoSitesAvailable = 14,
/// No connection to the internet.
  LocalzMediaErrorTypeENoConnection = 15,
/// Not relevant to LocalzMediaSDK. Failed obtaining location.
  LocalzMediaErrorTypeELocationFailed = 16,
/// Local storage error.
  LocalzMediaErrorTypeELocalStorageError = 17,
};

@class NSCoder;

SWIFT_CLASS("_TtC14LocalzMediaSDK14LocalzMediaKey")
@interface LocalzMediaKey : NSObject <NSCoding>
/// Internally used unique resource group identifier.
@property (nonatomic, copy) NSString * _Nonnull resourceId;
/// Internally and externally usable unique file identifier.
@property (nonatomic, copy) NSString * _Nonnull keyId;
/// Internally used unique multi-part upload identifier.
@property (nonatomic, copy) NSString * _Nullable uploadId;
/// Used to denote if it is located in the private or public bucket
@property (nonatomic) BOOL isPublic;
/// Initialise a new LocalzMediaKey with a random <code>resourceId</code> and <code>keyId</code>
/// \param isPublic An optional value to denote whether the uploaded file will be publicly accessible.
///
- (nonnull instancetype)initWithIsPublic:(BOOL)isPublic OBJC_DESIGNATED_INITIALIZER;
/// Initialise the LocalzMediaKey data response from the Localz API.
/// \param data The response object containing a <code>resourceId</code>, <code>keyId</code>, and optionally an <code>uploadId</code>.
///
/// \param isPublic An optional value to denote whether the uploaded file will be publicly accessible.
///
- (nonnull instancetype)initWithData:(NSDictionary<NSString *, id> * _Nonnull)data isPublic:(BOOL)isPublic OBJC_DESIGNATED_INITIALIZER;
/// Keyed archiver support.
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// Keyed unarchiver support.
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LocalzMediaSDK14LocalzMediaSDK")
@interface LocalzMediaSDK : NSObject
/// The shared instance of LocalzMediaSDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LocalzMediaSDK * _Nonnull shared;)
+ (LocalzMediaSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialises Localz Media SDK to piggyback on other SDKs.
/// This does <em>not</em> set up the SDK for authenticating requests, so the projectKey, attendantKey, username, and password must be provided by another SDK’s initialisation.
/// To use the SDK without requiring any other SDKs, initialise with a <code>projectKey</code>, <code>attendantKey</code>, <code>username</code>, and <code>password</code>.
/// \param projectId The project identifier of the Spotz project.
///
/// \param options The SDK configuration options apply during initialisation.
///
- (nonnull instancetype)initWithProjectId:(NSString * _Nonnull)projectId options:(NSDictionary<NSString *, id> * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
/// Initialises Localz Media SDK to function without other SDKs.
/// \param projectId The project identifier of the Spotz project.
///
/// \param projectKey The project secret key of the Spotz project.
///
/// \param attendantKey The attendant secret key for the Spotz project.
///
/// \param username The username of the attendant for the Spotz project.
///
/// \param password The password of the attendant for the Spotz project.
///
/// \param options The SDK configuration options apply during initialisation.
///
/// \param completion The completion block which will be called on success or fail of the SDK’s initialisation.
///
- (nonnull instancetype)initWithProjectId:(NSString * _Nonnull)projectId projectKey:(NSString * _Nonnull)projectKey attendantKey:(NSString * _Nonnull)attendantKey username:(NSString * _Nonnull)username password:(NSString * _Nonnull)password options:(NSDictionary<NSString *, id> * _Nullable)options completion:(void (^ _Nullable)(NSError * _Nullable))completion OBJC_DESIGNATED_INITIALIZER;
/// Begins a single-part upload of data.
/// This method will <em>not</em> work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param data The data object to upload.
///
/// \param extensionType The file type extension of the data being uploaded (e.g. png, mov, gif).
///
/// \param isPublic make file publicily accessible
///
- (void)uploadWithData:(NSData * _Nonnull)data extensionType:(NSString * _Nonnull)extensionType isPublic:(BOOL)isPublic onStart:(void (^ _Nullable)(LocalzMediaKey * _Nonnull))onStart;
/// Begins a single-part upload of a file at a local URL.
/// This method will <em>not</em> work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param fileURL The local URL of the file to upload.
///
/// \param extensionType The file type extension of the data being uploaded (e.g. png, mov, gif).
///
/// \param isPublic make file publicily accessible
///
- (void)uploadWithFileURL:(NSURL * _Nonnull)fileURL extensionType:(NSString * _Nonnull)extensionType isPublic:(BOOL)isPublic onStart:(void (^ _Nullable)(LocalzMediaKey * _Nonnull))onStart;
/// Begins a multi-part upload of data.
/// This method will work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param data The data object to upload.
///
/// \param extensionType The file type extension of the data being uploaded (e.g. png, mov, gif).
///
- (void)uploadMultiPartWithData:(NSData * _Nonnull)data extensionType:(NSString * _Nonnull)extensionType onStart:(void (^ _Nullable)(LocalzMediaKey * _Nonnull))onStart;
/// Begins a download of data using the key provided when
/// This method will work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param key The key of identifiers to perform and authenticate the download
///
- (void)downloadWithKey:(LocalzMediaKey * _Nonnull)key;
/// Forwards the background task completion handler to the SDK to exit the background session when all tasks have completed.
/// <em>Important:</em> This should be implemented in the AppDelegate by <code>application:handleEventsForBackgroundURLSession:completionHandler:</code>
/// \param completionHandler The completion handler that will be called when all background session tasks have finished.
///
- (void)setBackgroundCompletionHandlerWithCompletionHandler:(void (^ _Nullable)(void))completionHandler;
/// Get download URL for given media key
/// <ul>
///   <li>
///     Parameters:
///     - key: The key of identifiers to perform the action (and retrieve the correct image)
///     - completion: The completion handler
///   </li>
/// </ul>
- (void)getDownloadUrlWithKey:(LocalzMediaKey * _Nonnull)key completion:(void (^ _Nullable)(NSError * _Nullable, NSString * _Nullable))completion;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LocalzMediaSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC14LocalzMediaSDK20LocalzMediaConstants")
@interface LocalzMediaConstants : NSObject
/// The notification center name constant for observing starting upload/download events.
/// <em>Note:</em> The <code>key</code> should be kept to track progress of following events.
/// <code>OnStartNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "key" : LocalzMediaKey
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnStartNotification;)
+ (NSNotificationName _Nonnull)OnStartNotification SWIFT_WARN_UNUSED_RESULT;
/// The notification center name constant for observing progressing upload/download events.
/// <code>OnProgressNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "progress" : Double
///    "key" : LocalzMediaKey
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnProgressNotification;)
+ (NSNotificationName _Nonnull)OnProgressNotification SWIFT_WARN_UNUSED_RESULT;
/// The notification center name constant for observing successful upload/download events.
/// <code>OnSuccessNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "data" : Data (optional)
///    "key" : LocalzMediaKey
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnSuccessNotification;)
+ (NSNotificationName _Nonnull)OnSuccessNotification SWIFT_WARN_UNUSED_RESULT;
/// The notification center name constant for observing successful upload/download events.
/// <code>OnErrorNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "error" : Error
///    "key" : LocalzMediaKey (optional)
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnErrorNotification;)
+ (NSNotificationName _Nonnull)OnErrorNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// All types of LocalzMediaSDK errors.
typedef SWIFT_ENUM(NSInteger, LocalzMediaErrorType, closed) {
/// Invalid parameter given.
  LocalzMediaErrorTypeInvalidParameter = 1,
/// Response received from server is invalid.
  LocalzMediaErrorTypeEInvalidResponseFromServer = 2,
/// Unknown error.
  LocalzMediaErrorTypeEUnknownError = 3,
/// 404 error.
  LocalzMediaErrorTypeENotFound = 4,
/// Not authorised error.
  LocalzMediaErrorTypeENotAuthorised = 5,
/// User cancelled action.
  LocalzMediaErrorTypeEUserCancelled = 6,
/// Facebook related errors.
  LocalzMediaErrorTypeEFacebookError = 7,
/// Beacon related errors. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeEBeaconError = 8,
/// Bluetooth not enabled. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeEBluetoothNotEnabled = 9,
/// Location services not authorized. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeELocationNotAuthorized = 10,
/// Location services denied. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeELocationDenied = 11,
/// Location services not authorized. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeELocationNotEnabled = 12,
/// No projects available. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeENoProjectsAvailable = 13,
/// No sites available. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeENoSitesAvailable = 14,
/// No connection to the internet.
  LocalzMediaErrorTypeENoConnection = 15,
/// Not relevant to LocalzMediaSDK. Failed obtaining location.
  LocalzMediaErrorTypeELocationFailed = 16,
/// Local storage error.
  LocalzMediaErrorTypeELocalStorageError = 17,
};

@class NSCoder;

SWIFT_CLASS("_TtC14LocalzMediaSDK14LocalzMediaKey")
@interface LocalzMediaKey : NSObject <NSCoding>
/// Internally used unique resource group identifier.
@property (nonatomic, copy) NSString * _Nonnull resourceId;
/// Internally and externally usable unique file identifier.
@property (nonatomic, copy) NSString * _Nonnull keyId;
/// Internally used unique multi-part upload identifier.
@property (nonatomic, copy) NSString * _Nullable uploadId;
/// Used to denote if it is located in the private or public bucket
@property (nonatomic) BOOL isPublic;
/// Initialise a new LocalzMediaKey with a random <code>resourceId</code> and <code>keyId</code>
/// \param isPublic An optional value to denote whether the uploaded file will be publicly accessible.
///
- (nonnull instancetype)initWithIsPublic:(BOOL)isPublic OBJC_DESIGNATED_INITIALIZER;
/// Initialise the LocalzMediaKey data response from the Localz API.
/// \param data The response object containing a <code>resourceId</code>, <code>keyId</code>, and optionally an <code>uploadId</code>.
///
/// \param isPublic An optional value to denote whether the uploaded file will be publicly accessible.
///
- (nonnull instancetype)initWithData:(NSDictionary<NSString *, id> * _Nonnull)data isPublic:(BOOL)isPublic OBJC_DESIGNATED_INITIALIZER;
/// Keyed archiver support.
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// Keyed unarchiver support.
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LocalzMediaSDK14LocalzMediaSDK")
@interface LocalzMediaSDK : NSObject
/// The shared instance of LocalzMediaSDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LocalzMediaSDK * _Nonnull shared;)
+ (LocalzMediaSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialises Localz Media SDK to piggyback on other SDKs.
/// This does <em>not</em> set up the SDK for authenticating requests, so the projectKey, attendantKey, username, and password must be provided by another SDK’s initialisation.
/// To use the SDK without requiring any other SDKs, initialise with a <code>projectKey</code>, <code>attendantKey</code>, <code>username</code>, and <code>password</code>.
/// \param projectId The project identifier of the Spotz project.
///
/// \param options The SDK configuration options apply during initialisation.
///
- (nonnull instancetype)initWithProjectId:(NSString * _Nonnull)projectId options:(NSDictionary<NSString *, id> * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
/// Initialises Localz Media SDK to function without other SDKs.
/// \param projectId The project identifier of the Spotz project.
///
/// \param projectKey The project secret key of the Spotz project.
///
/// \param attendantKey The attendant secret key for the Spotz project.
///
/// \param username The username of the attendant for the Spotz project.
///
/// \param password The password of the attendant for the Spotz project.
///
/// \param options The SDK configuration options apply during initialisation.
///
/// \param completion The completion block which will be called on success or fail of the SDK’s initialisation.
///
- (nonnull instancetype)initWithProjectId:(NSString * _Nonnull)projectId projectKey:(NSString * _Nonnull)projectKey attendantKey:(NSString * _Nonnull)attendantKey username:(NSString * _Nonnull)username password:(NSString * _Nonnull)password options:(NSDictionary<NSString *, id> * _Nullable)options completion:(void (^ _Nullable)(NSError * _Nullable))completion OBJC_DESIGNATED_INITIALIZER;
/// Begins a single-part upload of data.
/// This method will <em>not</em> work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param data The data object to upload.
///
/// \param extensionType The file type extension of the data being uploaded (e.g. png, mov, gif).
///
/// \param isPublic make file publicily accessible
///
- (void)uploadWithData:(NSData * _Nonnull)data extensionType:(NSString * _Nonnull)extensionType isPublic:(BOOL)isPublic onStart:(void (^ _Nullable)(LocalzMediaKey * _Nonnull))onStart;
/// Begins a single-part upload of a file at a local URL.
/// This method will <em>not</em> work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param fileURL The local URL of the file to upload.
///
/// \param extensionType The file type extension of the data being uploaded (e.g. png, mov, gif).
///
/// \param isPublic make file publicily accessible
///
- (void)uploadWithFileURL:(NSURL * _Nonnull)fileURL extensionType:(NSString * _Nonnull)extensionType isPublic:(BOOL)isPublic onStart:(void (^ _Nullable)(LocalzMediaKey * _Nonnull))onStart;
/// Begins a multi-part upload of data.
/// This method will work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param data The data object to upload.
///
/// \param extensionType The file type extension of the data being uploaded (e.g. png, mov, gif).
///
- (void)uploadMultiPartWithData:(NSData * _Nonnull)data extensionType:(NSString * _Nonnull)extensionType onStart:(void (^ _Nullable)(LocalzMediaKey * _Nonnull))onStart;
/// Begins a download of data using the key provided when
/// This method will work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param key The key of identifiers to perform and authenticate the download
///
- (void)downloadWithKey:(LocalzMediaKey * _Nonnull)key;
/// Forwards the background task completion handler to the SDK to exit the background session when all tasks have completed.
/// <em>Important:</em> This should be implemented in the AppDelegate by <code>application:handleEventsForBackgroundURLSession:completionHandler:</code>
/// \param completionHandler The completion handler that will be called when all background session tasks have finished.
///
- (void)setBackgroundCompletionHandlerWithCompletionHandler:(void (^ _Nullable)(void))completionHandler;
/// Get download URL for given media key
/// <ul>
///   <li>
///     Parameters:
///     - key: The key of identifiers to perform the action (and retrieve the correct image)
///     - completion: The completion handler
///   </li>
/// </ul>
- (void)getDownloadUrlWithKey:(LocalzMediaKey * _Nonnull)key completion:(void (^ _Nullable)(NSError * _Nullable, NSString * _Nullable))completion;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#else

#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LocalzMediaSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC14LocalzMediaSDK20LocalzMediaConstants")
@interface LocalzMediaConstants : NSObject
/// The notification center name constant for observing starting upload/download events.
/// <em>Note:</em> The <code>key</code> should be kept to track progress of following events.
/// <code>OnStartNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "key" : LocalzMediaKey
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnStartNotification;)
+ (NSNotificationName _Nonnull)OnStartNotification SWIFT_WARN_UNUSED_RESULT;
/// The notification center name constant for observing progressing upload/download events.
/// <code>OnProgressNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "progress" : Double
///    "key" : LocalzMediaKey
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnProgressNotification;)
+ (NSNotificationName _Nonnull)OnProgressNotification SWIFT_WARN_UNUSED_RESULT;
/// The notification center name constant for observing successful upload/download events.
/// <code>OnSuccessNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "data" : Data (optional)
///    "key" : LocalzMediaKey
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnSuccessNotification;)
+ (NSNotificationName _Nonnull)OnSuccessNotification SWIFT_WARN_UNUSED_RESULT;
/// The notification center name constant for observing successful upload/download events.
/// <code>OnErrorNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "error" : Error
///    "key" : LocalzMediaKey (optional)
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnErrorNotification;)
+ (NSNotificationName _Nonnull)OnErrorNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// All types of LocalzMediaSDK errors.
typedef SWIFT_ENUM(NSInteger, LocalzMediaErrorType, closed) {
/// Invalid parameter given.
  LocalzMediaErrorTypeInvalidParameter = 1,
/// Response received from server is invalid.
  LocalzMediaErrorTypeEInvalidResponseFromServer = 2,
/// Unknown error.
  LocalzMediaErrorTypeEUnknownError = 3,
/// 404 error.
  LocalzMediaErrorTypeENotFound = 4,
/// Not authorised error.
  LocalzMediaErrorTypeENotAuthorised = 5,
/// User cancelled action.
  LocalzMediaErrorTypeEUserCancelled = 6,
/// Facebook related errors.
  LocalzMediaErrorTypeEFacebookError = 7,
/// Beacon related errors. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeEBeaconError = 8,
/// Bluetooth not enabled. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeEBluetoothNotEnabled = 9,
/// Location services not authorized. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeELocationNotAuthorized = 10,
/// Location services denied. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeELocationDenied = 11,
/// Location services not authorized. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeELocationNotEnabled = 12,
/// No projects available. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeENoProjectsAvailable = 13,
/// No sites available. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeENoSitesAvailable = 14,
/// No connection to the internet.
  LocalzMediaErrorTypeENoConnection = 15,
/// Not relevant to LocalzMediaSDK. Failed obtaining location.
  LocalzMediaErrorTypeELocationFailed = 16,
/// Local storage error.
  LocalzMediaErrorTypeELocalStorageError = 17,
};

@class NSCoder;

SWIFT_CLASS("_TtC14LocalzMediaSDK14LocalzMediaKey")
@interface LocalzMediaKey : NSObject <NSCoding>
/// Internally used unique resource group identifier.
@property (nonatomic, copy) NSString * _Nonnull resourceId;
/// Internally and externally usable unique file identifier.
@property (nonatomic, copy) NSString * _Nonnull keyId;
/// Internally used unique multi-part upload identifier.
@property (nonatomic, copy) NSString * _Nullable uploadId;
/// Used to denote if it is located in the private or public bucket
@property (nonatomic) BOOL isPublic;
/// Initialise a new LocalzMediaKey with a random <code>resourceId</code> and <code>keyId</code>
/// \param isPublic An optional value to denote whether the uploaded file will be publicly accessible.
///
- (nonnull instancetype)initWithIsPublic:(BOOL)isPublic OBJC_DESIGNATED_INITIALIZER;
/// Initialise the LocalzMediaKey data response from the Localz API.
/// \param data The response object containing a <code>resourceId</code>, <code>keyId</code>, and optionally an <code>uploadId</code>.
///
/// \param isPublic An optional value to denote whether the uploaded file will be publicly accessible.
///
- (nonnull instancetype)initWithData:(NSDictionary<NSString *, id> * _Nonnull)data isPublic:(BOOL)isPublic OBJC_DESIGNATED_INITIALIZER;
/// Keyed archiver support.
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// Keyed unarchiver support.
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LocalzMediaSDK14LocalzMediaSDK")
@interface LocalzMediaSDK : NSObject
/// The shared instance of LocalzMediaSDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LocalzMediaSDK * _Nonnull shared;)
+ (LocalzMediaSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialises Localz Media SDK to piggyback on other SDKs.
/// This does <em>not</em> set up the SDK for authenticating requests, so the projectKey, attendantKey, username, and password must be provided by another SDK’s initialisation.
/// To use the SDK without requiring any other SDKs, initialise with a <code>projectKey</code>, <code>attendantKey</code>, <code>username</code>, and <code>password</code>.
/// \param projectId The project identifier of the Spotz project.
///
/// \param options The SDK configuration options apply during initialisation.
///
- (nonnull instancetype)initWithProjectId:(NSString * _Nonnull)projectId options:(NSDictionary<NSString *, id> * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
/// Initialises Localz Media SDK to function without other SDKs.
/// \param projectId The project identifier of the Spotz project.
///
/// \param projectKey The project secret key of the Spotz project.
///
/// \param attendantKey The attendant secret key for the Spotz project.
///
/// \param username The username of the attendant for the Spotz project.
///
/// \param password The password of the attendant for the Spotz project.
///
/// \param options The SDK configuration options apply during initialisation.
///
/// \param completion The completion block which will be called on success or fail of the SDK’s initialisation.
///
- (nonnull instancetype)initWithProjectId:(NSString * _Nonnull)projectId projectKey:(NSString * _Nonnull)projectKey attendantKey:(NSString * _Nonnull)attendantKey username:(NSString * _Nonnull)username password:(NSString * _Nonnull)password options:(NSDictionary<NSString *, id> * _Nullable)options completion:(void (^ _Nullable)(NSError * _Nullable))completion OBJC_DESIGNATED_INITIALIZER;
/// Begins a single-part upload of data.
/// This method will <em>not</em> work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param data The data object to upload.
///
/// \param extensionType The file type extension of the data being uploaded (e.g. png, mov, gif).
///
/// \param isPublic make file publicily accessible
///
- (void)uploadWithData:(NSData * _Nonnull)data extensionType:(NSString * _Nonnull)extensionType isPublic:(BOOL)isPublic onStart:(void (^ _Nullable)(LocalzMediaKey * _Nonnull))onStart;
/// Begins a single-part upload of a file at a local URL.
/// This method will <em>not</em> work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param fileURL The local URL of the file to upload.
///
/// \param extensionType The file type extension of the data being uploaded (e.g. png, mov, gif).
///
/// \param isPublic make file publicily accessible
///
- (void)uploadWithFileURL:(NSURL * _Nonnull)fileURL extensionType:(NSString * _Nonnull)extensionType isPublic:(BOOL)isPublic onStart:(void (^ _Nullable)(LocalzMediaKey * _Nonnull))onStart;
/// Begins a multi-part upload of data.
/// This method will work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param data The data object to upload.
///
/// \param extensionType The file type extension of the data being uploaded (e.g. png, mov, gif).
///
- (void)uploadMultiPartWithData:(NSData * _Nonnull)data extensionType:(NSString * _Nonnull)extensionType onStart:(void (^ _Nullable)(LocalzMediaKey * _Nonnull))onStart;
/// Begins a download of data using the key provided when
/// This method will work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param key The key of identifiers to perform and authenticate the download
///
- (void)downloadWithKey:(LocalzMediaKey * _Nonnull)key;
/// Forwards the background task completion handler to the SDK to exit the background session when all tasks have completed.
/// <em>Important:</em> This should be implemented in the AppDelegate by <code>application:handleEventsForBackgroundURLSession:completionHandler:</code>
/// \param completionHandler The completion handler that will be called when all background session tasks have finished.
///
- (void)setBackgroundCompletionHandlerWithCompletionHandler:(void (^ _Nullable)(void))completionHandler;
/// Get download URL for given media key
/// <ul>
///   <li>
///     Parameters:
///     - key: The key of identifiers to perform the action (and retrieve the correct image)
///     - completion: The completion handler
///   </li>
/// </ul>
- (void)getDownloadUrlWithKey:(LocalzMediaKey * _Nonnull)key completion:(void (^ _Nullable)(NSError * _Nullable, NSString * _Nullable))completion;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LocalzMediaSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC14LocalzMediaSDK20LocalzMediaConstants")
@interface LocalzMediaConstants : NSObject
/// The notification center name constant for observing starting upload/download events.
/// <em>Note:</em> The <code>key</code> should be kept to track progress of following events.
/// <code>OnStartNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "key" : LocalzMediaKey
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnStartNotification;)
+ (NSNotificationName _Nonnull)OnStartNotification SWIFT_WARN_UNUSED_RESULT;
/// The notification center name constant for observing progressing upload/download events.
/// <code>OnProgressNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "progress" : Double
///    "key" : LocalzMediaKey
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnProgressNotification;)
+ (NSNotificationName _Nonnull)OnProgressNotification SWIFT_WARN_UNUSED_RESULT;
/// The notification center name constant for observing successful upload/download events.
/// <code>OnSuccessNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "data" : Data (optional)
///    "key" : LocalzMediaKey
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnSuccessNotification;)
+ (NSNotificationName _Nonnull)OnSuccessNotification SWIFT_WARN_UNUSED_RESULT;
/// The notification center name constant for observing successful upload/download events.
/// <code>OnErrorNotification</code> userInfo contains:
/// \code
/// userInfo {
///    "error" : Error
///    "key" : LocalzMediaKey (optional)
/// }
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull OnErrorNotification;)
+ (NSNotificationName _Nonnull)OnErrorNotification SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// All types of LocalzMediaSDK errors.
typedef SWIFT_ENUM(NSInteger, LocalzMediaErrorType, closed) {
/// Invalid parameter given.
  LocalzMediaErrorTypeInvalidParameter = 1,
/// Response received from server is invalid.
  LocalzMediaErrorTypeEInvalidResponseFromServer = 2,
/// Unknown error.
  LocalzMediaErrorTypeEUnknownError = 3,
/// 404 error.
  LocalzMediaErrorTypeENotFound = 4,
/// Not authorised error.
  LocalzMediaErrorTypeENotAuthorised = 5,
/// User cancelled action.
  LocalzMediaErrorTypeEUserCancelled = 6,
/// Facebook related errors.
  LocalzMediaErrorTypeEFacebookError = 7,
/// Beacon related errors. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeEBeaconError = 8,
/// Bluetooth not enabled. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeEBluetoothNotEnabled = 9,
/// Location services not authorized. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeELocationNotAuthorized = 10,
/// Location services denied. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeELocationDenied = 11,
/// Location services not authorized. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeELocationNotEnabled = 12,
/// No projects available. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeENoProjectsAvailable = 13,
/// No sites available. <em>Not relevant to LocalzMediaSDK.</em>
  LocalzMediaErrorTypeENoSitesAvailable = 14,
/// No connection to the internet.
  LocalzMediaErrorTypeENoConnection = 15,
/// Not relevant to LocalzMediaSDK. Failed obtaining location.
  LocalzMediaErrorTypeELocationFailed = 16,
/// Local storage error.
  LocalzMediaErrorTypeELocalStorageError = 17,
};

@class NSCoder;

SWIFT_CLASS("_TtC14LocalzMediaSDK14LocalzMediaKey")
@interface LocalzMediaKey : NSObject <NSCoding>
/// Internally used unique resource group identifier.
@property (nonatomic, copy) NSString * _Nonnull resourceId;
/// Internally and externally usable unique file identifier.
@property (nonatomic, copy) NSString * _Nonnull keyId;
/// Internally used unique multi-part upload identifier.
@property (nonatomic, copy) NSString * _Nullable uploadId;
/// Used to denote if it is located in the private or public bucket
@property (nonatomic) BOOL isPublic;
/// Initialise a new LocalzMediaKey with a random <code>resourceId</code> and <code>keyId</code>
/// \param isPublic An optional value to denote whether the uploaded file will be publicly accessible.
///
- (nonnull instancetype)initWithIsPublic:(BOOL)isPublic OBJC_DESIGNATED_INITIALIZER;
/// Initialise the LocalzMediaKey data response from the Localz API.
/// \param data The response object containing a <code>resourceId</code>, <code>keyId</code>, and optionally an <code>uploadId</code>.
///
/// \param isPublic An optional value to denote whether the uploaded file will be publicly accessible.
///
- (nonnull instancetype)initWithData:(NSDictionary<NSString *, id> * _Nonnull)data isPublic:(BOOL)isPublic OBJC_DESIGNATED_INITIALIZER;
/// Keyed archiver support.
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
/// Keyed unarchiver support.
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC14LocalzMediaSDK14LocalzMediaSDK")
@interface LocalzMediaSDK : NSObject
/// The shared instance of LocalzMediaSDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) LocalzMediaSDK * _Nonnull shared;)
+ (LocalzMediaSDK * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialises Localz Media SDK to piggyback on other SDKs.
/// This does <em>not</em> set up the SDK for authenticating requests, so the projectKey, attendantKey, username, and password must be provided by another SDK’s initialisation.
/// To use the SDK without requiring any other SDKs, initialise with a <code>projectKey</code>, <code>attendantKey</code>, <code>username</code>, and <code>password</code>.
/// \param projectId The project identifier of the Spotz project.
///
/// \param options The SDK configuration options apply during initialisation.
///
- (nonnull instancetype)initWithProjectId:(NSString * _Nonnull)projectId options:(NSDictionary<NSString *, id> * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
/// Initialises Localz Media SDK to function without other SDKs.
/// \param projectId The project identifier of the Spotz project.
///
/// \param projectKey The project secret key of the Spotz project.
///
/// \param attendantKey The attendant secret key for the Spotz project.
///
/// \param username The username of the attendant for the Spotz project.
///
/// \param password The password of the attendant for the Spotz project.
///
/// \param options The SDK configuration options apply during initialisation.
///
/// \param completion The completion block which will be called on success or fail of the SDK’s initialisation.
///
- (nonnull instancetype)initWithProjectId:(NSString * _Nonnull)projectId projectKey:(NSString * _Nonnull)projectKey attendantKey:(NSString * _Nonnull)attendantKey username:(NSString * _Nonnull)username password:(NSString * _Nonnull)password options:(NSDictionary<NSString *, id> * _Nullable)options completion:(void (^ _Nullable)(NSError * _Nullable))completion OBJC_DESIGNATED_INITIALIZER;
/// Begins a single-part upload of data.
/// This method will <em>not</em> work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param data The data object to upload.
///
/// \param extensionType The file type extension of the data being uploaded (e.g. png, mov, gif).
///
/// \param isPublic make file publicily accessible
///
- (void)uploadWithData:(NSData * _Nonnull)data extensionType:(NSString * _Nonnull)extensionType isPublic:(BOOL)isPublic onStart:(void (^ _Nullable)(LocalzMediaKey * _Nonnull))onStart;
/// Begins a single-part upload of a file at a local URL.
/// This method will <em>not</em> work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param fileURL The local URL of the file to upload.
///
/// \param extensionType The file type extension of the data being uploaded (e.g. png, mov, gif).
///
/// \param isPublic make file publicily accessible
///
- (void)uploadWithFileURL:(NSURL * _Nonnull)fileURL extensionType:(NSString * _Nonnull)extensionType isPublic:(BOOL)isPublic onStart:(void (^ _Nullable)(LocalzMediaKey * _Nonnull))onStart;
/// Begins a multi-part upload of data.
/// This method will work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param data The data object to upload.
///
/// \param extensionType The file type extension of the data being uploaded (e.g. png, mov, gif).
///
- (void)uploadMultiPartWithData:(NSData * _Nonnull)data extensionType:(NSString * _Nonnull)extensionType onStart:(void (^ _Nullable)(LocalzMediaKey * _Nonnull))onStart;
/// Begins a download of data using the key provided when
/// This method will work when the app is in a suspended state.
/// Status updates to the upload will be reported via the notification center names:
/// <ul>
///   <li>
///     OnStartNotification
///   </li>
///   <li>
///     OnProgressNotification
///   </li>
///   <li>
///     OnSuccessNotification
///   </li>
///   <li>
///     OnErrorNotification
///   </li>
/// </ul>
/// \param key The key of identifiers to perform and authenticate the download
///
- (void)downloadWithKey:(LocalzMediaKey * _Nonnull)key;
/// Forwards the background task completion handler to the SDK to exit the background session when all tasks have completed.
/// <em>Important:</em> This should be implemented in the AppDelegate by <code>application:handleEventsForBackgroundURLSession:completionHandler:</code>
/// \param completionHandler The completion handler that will be called when all background session tasks have finished.
///
- (void)setBackgroundCompletionHandlerWithCompletionHandler:(void (^ _Nullable)(void))completionHandler;
/// Get download URL for given media key
/// <ul>
///   <li>
///     Parameters:
///     - key: The key of identifiers to perform the action (and retrieve the correct image)
///     - completion: The completion handler
///   </li>
/// </ul>
- (void)getDownloadUrlWithKey:(LocalzMediaKey * _Nonnull)key completion:(void (^ _Nullable)(NSError * _Nullable, NSString * _Nullable))completion;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#endif
